/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_debug_options.py" and edit the "DebugOptions" function there.
 * -----------------------------------------------------------------------------
 */

#include <Cool/ImGui/ImGuiExtras.h>
#include <wafl/wafl.hpp>

namespace Cool {
template<typename... Ts>
class DebugOptionsManager; // Forward declare this class so that the friend declaration that comes later on doesn't fail.
}

namespace Demo {

class DebugOptions {
public:
    static void show_framerate_window(std::function<void()> callback)
    {
        if (instance().show_framerate_window)
        {
            ImGui::Begin(Cool::icon_fmt("Framerate", ICOMOON_WRENCH).c_str(), &instance().show_framerate_window, ImGuiWindowFlags_NoFocusOnAppearing);
            callback();
            ImGui::End();
        }
    }
    [[nodiscard]] static auto show_imgui_demo_window() -> bool& { return instance().show_imgui_demo_window; }
    [[nodiscard]] static auto log_when_rendering() -> bool& { return instance().log_when_rendering; }

private:
    struct Instance {
        bool show_framerate_window{false};
        bool show_imgui_demo_window{false};
        bool log_when_rendering{false};

    private:
        // Serialization
        friend class cereal::access;
        template<class Archive>
        void serialize(Archive& archive)
        {
            archive(
#if DEBUG
                cereal::make_nvp("Framerate window", show_framerate_window),
                cereal::make_nvp("ImGui Demo window", show_imgui_demo_window),
                cereal::make_nvp("Log when rendering", log_when_rendering)
#else
                cereal::make_nvp("Framerate window", show_framerate_window),
                cereal::make_nvp("ImGui Demo window", show_imgui_demo_window),
                cereal::make_nvp("Log when rendering", log_when_rendering)
#endif

            );
        }
    };

    static void reset_all()
    {
        instance().show_framerate_window  = false;
        instance().show_imgui_demo_window = false;
        instance().log_when_rendering     = false;
    }

    static void save_to_file();
    static auto load_debug_options() -> Instance;

    static auto instance() -> Instance&
    {
        static auto the_instance = Instance{load_debug_options()};
        return the_instance;
    }

    template<typename... Ts>
    friend class Cool::DebugOptionsManager; // We go through this indirection so that only the files which include "DebugOptionsManager" can call `imgui_ui_for_all_options()`

    static void imgui_ui_for_all_options(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            Cool::ImGuiExtras::toggle("Framerate window", &instance().show_framerate_window);
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            Cool::ImGuiExtras::toggle("ImGui Demo window", &instance().show_imgui_demo_window);
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            Cool::ImGuiExtras::toggle("Log when rendering", &instance().log_when_rendering);
        }
    }

    static void toggle_first_option(std::string_view filter)
    {
        if (wafl::similarity_match({filter, "Framerate window"}) >= wafl::Matches::Strongly)
        {
            instance().show_framerate_window = !instance().show_framerate_window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "ImGui Demo window"}) >= wafl::Matches::Strongly)
        {
            instance().show_imgui_demo_window = !instance().show_imgui_demo_window;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }

        if (wafl::similarity_match({filter, "Log when rendering"}) >= wafl::Matches::Strongly)
        {
            instance().log_when_rendering = !instance().log_when_rendering;
            throw 0.f; // To understand why we need to throw, see `toggle_first_option()` in <Cool/DebugOptions/DebugOptionsManager.h>
        }
    }
};

} // namespace Demo
